'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _transport = require('./transport');

var _transport2 = _interopRequireDefault(_transport);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HEADER_BLACKLIST = ['content-type']; // Copyright BigchainDB GmbH and BigchainDB contributors
// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)
// Code is Apache-2.0 and docs are CC-BY-4.0

var DEFAULT_NODE = 'http://localhost:9984/api/v1/';
var DEFAULT_TIMEOUT = 20000; // The default value is 20 seconds

/**
 *
 * @param  {String, Array}  nodes    Nodes for the connection. String possible to be backwards compatible
 *                                   with version before 4.1.0 version
 * @param  {Object}  headers         Common headers for every request
 * @param  {float}  timeout          Optional timeout in secs
 *
 *
 */

var Connection = function () {
    // This driver implements the BEP-14 https://github.com/bigchaindb/BEPs/tree/master/14
    function Connection(nodes) {
        var _this = this;

        var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_TIMEOUT;
        (0, _classCallCheck3.default)(this, Connection);

        // Copy object
        this.headers = (0, _extends3.default)({}, headers);

        // Validate headers
        Object.keys(headers).forEach(function (header) {
            if (HEADER_BLACKLIST.includes(header.toLowerCase())) {
                throw new Error('Header ' + header + ' is reserved and cannot be set.');
            }
        });

        this.normalizedNodes = [];
        if (!nodes) {
            this.normalizedNodes.push(Connection.normalizeNode(DEFAULT_NODE, this.headers));
        } else if (Array.isArray(nodes)) {
            nodes.forEach(function (node) {
                _this.normalizedNodes.push(Connection.normalizeNode(node, _this.headers));
            });
        } else {
            this.normalizedNodes.push(Connection.normalizeNode(nodes, this.headers));
        }

        this.transport = new _transport2.default(this.normalizedNodes, timeout);
    }

    (0, _createClass3.default)(Connection, [{
        key: '_req',
        value: function _req(path) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.transport.forwardRequest(path, options);
        }

        /**
         * @param blockHeight
         */

    }, {
        key: 'getBlock',
        value: function getBlock(blockHeight) {
            return this._req(Connection.getApiUrls('blocksDetail'), {
                urlTemplateSpec: {
                    blockHeight: blockHeight
                }
            });
        }

        /**
         * @param transactionId
         */

    }, {
        key: 'getTransaction',
        value: function getTransaction(transactionId) {
            return this._req(Connection.getApiUrls('transactionsDetail'), {
                urlTemplateSpec: {
                    transactionId: transactionId
                }
            });
        }

        /**
         * @param transactionId
         * @param status
         */

    }, {
        key: 'listBlocks',
        value: function listBlocks(transactionId) {
            return this._req(Connection.getApiUrls('blocks'), {
                query: {
                    transaction_id: transactionId
                }
            });
        }

        /**
         * @param publicKey
         * @param spent
         */

    }, {
        key: 'listOutputs',
        value: function listOutputs(publicKey, spent) {
            var query = {
                public_key: publicKey
                // NOTE: If `spent` is not defined, it must not be included in the
                // query parameters.
            };if (spent !== undefined) {
                query.spent = spent.toString();
            }
            return this._req(Connection.getApiUrls('outputs'), {
                query: query
            });
        }

        /**
         * @param assetId
         * @param operation
         */

    }, {
        key: 'listTransactions',
        value: function listTransactions(assetId, operation) {
            return this._req(Connection.getApiUrls('transactions'), {
                query: {
                    asset_id: assetId,
                    operation: operation
                }
            });
        }

        /**
         * @param transaction
         */

    }, {
        key: 'postTransaction',
        value: function postTransaction(transaction) {
            return this.postTransactionCommit(transaction);
        }

        /**
         * @param transaction
         */

    }, {
        key: 'postTransactionSync',
        value: function postTransactionSync(transaction) {
            return this._req(Connection.getApiUrls('transactionsSync'), {
                method: 'POST',
                jsonBody: transaction
            });
        }

        /**
         * @param transaction
         */

    }, {
        key: 'postTransactionAsync',
        value: function postTransactionAsync(transaction) {
            return this._req(Connection.getApiUrls('transactionsAsync'), {
                method: 'POST',
                jsonBody: transaction
            });
        }

        /**
         * @param transaction
         */

    }, {
        key: 'postTransactionCommit',
        value: function postTransactionCommit(transaction) {
            return this._req(Connection.getApiUrls('transactionsCommit'), {
                method: 'POST',
                jsonBody: transaction
            });
        }

        /**
         * @param search
         */

    }, {
        key: 'searchAssets',
        value: function searchAssets(search) {
            return this._req(Connection.getApiUrls('assets'), {
                query: {
                    search: search
                }
            });
        }

        /**
         * @param search
         */

    }, {
        key: 'searchMetadata',
        value: function searchMetadata(search) {
            return this._req(Connection.getApiUrls('metadata'), {
                query: {
                    search: search
                }
            });
        }
    }], [{
        key: 'normalizeNode',
        value: function normalizeNode(node, headers) {
            if (typeof node === 'string') {
                return { 'endpoint': node, 'headers': headers };
            } else {
                var allHeaders = (0, _extends3.default)({}, headers, node.headers);
                return { 'endpoint': node.endpoint, 'headers': allHeaders };
            }
        }
    }, {
        key: 'getApiUrls',
        value: function getApiUrls(endpoint) {
            return {
                'blocks': 'blocks',
                'blocksDetail': 'blocks/%(blockHeight)s',
                'outputs': 'outputs',
                'transactions': 'transactions',
                'transactionsSync': 'transactions?mode=sync',
                'transactionsAsync': 'transactions?mode=async',
                'transactionsCommit': 'transactions?mode=commit',
                'transactionsDetail': 'transactions/%(transactionId)s',
                'assets': 'assets',
                'metadata': 'metadata'
            }[endpoint];
        }
    }]);
    return Connection;
}();

exports.default = Connection;