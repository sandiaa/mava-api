'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = sanitize;

var _includes = require('core-js/library/fn/array/includes');

var _includes2 = _interopRequireDefault(_includes);

var _entries = require('core-js/library/fn/object/entries');

var _entries2 = _interopRequireDefault(_entries);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * Abstraction for selectFromObject and omitFromObject for DRYness.
 * Set isInclusion to true if the filter should be for including the filtered items (ie. selecting
 * only them vs omitting only them).
 */
// Copyright BigchainDB GmbH and BigchainDB contributors
// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)
// Code is Apache-2.0 and docs are CC-BY-4.0

function filterFromObject(obj, filter) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$isInclusion = _ref.isInclusion,
        isInclusion = _ref$isInclusion === undefined ? true : _ref$isInclusion;

    if (filter && Array.isArray(filter)) {
        return applyFilterOnObject(obj, isInclusion ? function (val) {
            return (0, _includes2.default)(filter, val);
        } : function (val) {
            return !(0, _includes2.default)(filter, val);
        });
    } else if (filter && typeof filter === 'function') {
        // Flip the filter fn's return if it's for inclusion
        return applyFilterOnObject(obj, isInclusion ? filter : function () {
            return !filter.apply(undefined, arguments);
        });
    } else {
        throw new Error('The given filter is not an array or function. Filter aborted');
    }
}

/**
 * @private
 * Returns a filtered copy of the given object's own enumerable properties (no inherited
 * properties), keeping any keys that pass the given filter function.
 */
function applyFilterOnObject(obj, filterFn) {
    if (filterFn == null) {
        return (0, _extends3.default)({}, obj);
    }

    var filteredObj = {};
    (0, _entries2.default)(obj).forEach(function (_ref2) {
        var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),
            key = _ref3[0],
            val = _ref3[1];

        if (filterFn(val, key)) {
            filteredObj[key] = val;
        }
    });

    return filteredObj;
}

/**
 * @private
 * Similar to lodash's _.pick(), this returns a copy of the given object's
 * own and inherited enumerable properties, selecting only the keys in
 * the given array or whose value pass the given filter function.
 * @param {Object} obj Source object
 * @param {Array|function} filter Array of key names to select or function to invoke per iteration
 * @return {Object} The new object
 */
function selectFromObject(obj, filter) {
    return filterFromObject(obj, filter);
}

/**
 * @private
 * Glorified selectFromObject. Takes an object and returns a filtered shallow copy that strips out
 * any properties that are falsy (including coercions, ie. undefined, null, '', 0, ...).
 * Does not modify the passed in object.
 *
 * @param {Object} obj Javascript object
 * @return {Object} Sanitized Javascript object
 */
function sanitize(obj) {
    return selectFromObject(obj, function (val) {
        return !!val;
    });
}